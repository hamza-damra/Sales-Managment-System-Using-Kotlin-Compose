{
  "info": {
    "name": "Returns API - Working Examples",
    "description": "Working examples for Returns API with actual data from your system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8081",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "sale_id",
      "value": "8",
      "type": "string"
    },
    {
      "key": "return_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.token);",
                  "    console.log('JWT Token set successfully');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Check Available Data",
      "item": [
        {
          "name": "Get Customers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "customers"]
            }
          }
        },
        {
          "name": "Get Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Get Sales",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/sales",
              "host": ["{{base_url}}"],
              "path": ["api", "sales"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Create Sale with Items",
      "item": [
        {
          "name": "Create Sale with Jabra Headphones",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('sale_id', response.id);",
                  "    console.log('Sale created with ID:', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerId\": 1,\n  \"totalAmount\": 299.00,\n  \"subtotal\": 299.00,\n  \"status\": \"COMPLETED\",\n  \"paymentStatus\": \"PAID\",\n  \"paymentMethod\": \"CREDIT_CARD\",\n  \"items\": [\n    {\n      \"productId\": 9,\n      \"quantity\": 1,\n      \"unitPrice\": 299.00,\n      \"totalPrice\": 299.00\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/sales",
              "host": ["{{base_url}}"],
              "path": ["api", "sales"]
            }
          }
        },
        {
          "name": "Get Created Sale Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/sales/{{sale_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "sales", "{{sale_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Returns Management",
      "item": [
        {
          "name": "Create Return Request - Working Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('return_id', response.id);",
                  "    console.log('Return created with ID:', response.id);",
                  "",
                  "    pm.test('Return has correct data', function () {",
                  "        pm.expect(response).to.have.property('returnNumber');",
                  "        pm.expect(response.status).to.eql('PENDING');",
                  "        pm.expect(response.totalRefundAmount).to.eql(299.00);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"originalSaleId\": 8,\n  \"customerId\": 1,\n  \"reason\": \"DAMAGED_IN_SHIPPING\",\n  \"status\": \"PENDING\",\n  \"totalRefundAmount\": 299.00,\n  \"notes\": \"Customer reported damaged Jabra headphones\",\n  \"refundMethod\": \"CASH\",\n  \"items\": [\n    {\n      \"originalSaleItemId\": 11,\n      \"productId\": 9,\n      \"returnQuantity\": 1,\n      \"originalUnitPrice\": 299.00,\n      \"refundAmount\": 299.00,\n      \"itemCondition\": \"DAMAGED\",\n      \"conditionNotes\": \"Headphones damaged during shipping\",\n      \"isRestockable\": false\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/returns",
              "host": ["{{base_url}}"],
              "path": ["api", "returns"]
            }
          }
        },
        {
          "name": "Get All Returns",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/returns?page=0&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "returns"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Return by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/returns/{{return_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "returns", "{{return_id}}"]
            }
          }
        },
        {
          "name": "Approve Return",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Return is approved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('APPROVED');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approvedBy\": \"admin@company.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/returns/{{return_id}}/approve",
              "host": ["{{base_url}}"],
              "path": ["api", "returns", "{{return_id}}", "approve"]
            }
          }
        },
        {
          "name": "Process Refund",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Refund is processed', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('REFUNDED');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refundMethod\": \"CREDIT_CARD\",\n  \"refundReference\": \"REF123456789\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/returns/{{return_id}}/refund",
              "host": ["{{base_url}}"],
              "path": ["api", "returns", "{{return_id}}", "refund"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Error Testing",
      "item": [
        {
          "name": "Create Return - Invalid Sale ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message contains available sales', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Available sales');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"originalSaleId\": 999,\n  \"customerId\": 1,\n  \"reason\": \"DAMAGED_IN_SHIPPING\",\n  \"status\": \"PENDING\",\n  \"totalRefundAmount\": 299.00,\n  \"notes\": \"Test with invalid sale ID\",\n  \"refundMethod\": \"CASH\",\n  \"items\": [\n    {\n      \"originalSaleItemId\": 11,\n      \"productId\": 9,\n      \"returnQuantity\": 1,\n      \"originalUnitPrice\": 299.00,\n      \"refundAmount\": 299.00,\n      \"itemCondition\": \"DAMAGED\",\n      \"conditionNotes\": \"Test\",\n      \"isRestockable\": false\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/returns",
              "host": ["{{base_url}}"],
              "path": ["api", "returns"]
            }
          }
        },
        {
          "name": "Create Return - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerId\": 1,\n  \"reason\": \"DAMAGED_IN_SHIPPING\",\n  \"notes\": \"Missing originalSaleId\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/returns",
              "host": ["{{base_url}}"],
              "path": ["api", "returns"]
            }
          }
        }
      ]
    }
  ]
}
